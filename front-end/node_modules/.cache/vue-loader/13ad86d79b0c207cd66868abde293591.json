{"remainingRequest":"/Users/marbrgr/CS260/260cp4/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/marbrgr/CS260/260cp4/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marbrgr/CS260/260cp4/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marbrgr/CS260/260cp4/front-end/src/views/Create.vue?vue&type=template&id=6ee6d5b6&scoped=true&","dependencies":[{"path":"/Users/marbrgr/CS260/260cp4/front-end/src/views/Create.vue","mtime":1649908415510},{"path":"/Users/marbrgr/CS260/260cp4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1649373799540},{"path":"/Users/marbrgr/CS260/260cp4/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649373800218},{"path":"/Users/marbrgr/CS260/260cp4/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1649373799540},{"path":"/Users/marbrgr/CS260/260cp4/front-end/node_modules/vue-loader/lib/index.js","mtime":1649373800044}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}